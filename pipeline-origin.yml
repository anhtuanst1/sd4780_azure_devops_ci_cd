pool:
  vmImage: 'ubuntu-latest'

name: $(Build.BuildId)

trigger:
  branches:
    include:
    - main

resources:
  repositories:
    - repository: sd4780_msa
      type: git
      name: 'sd4780-devops/sd4780_msa'
      ref: main
      trigger:
        branches:
          include:
            - main

variables:
- name: backend_app_dir
  value: 'app/sd4780_msa/src/backend'
- name: frontend_app_dir
  value: 'app/sd4780_msa/src/frontend'
- name: k8s_mongo_path
  value: 'app/sd4780_msa/k8s/mongodb.yaml'
- name: k8s_backend_path
  value: 'app/sd4780_msa/k8s/backend.yaml'
- name: k8s_frontend_path
  value: 'app/sd4780_msa/k8s/frontend.yaml'
- name: k8s_ingress_path
  value: 'app/sd4780_msa/k8s/ingress.yaml'

parameters:
- name: cleanNpmCache
  type: boolean
  default: false

jobs:
- job: Job_CI
  pool:
    name: 'Azure Pipelines'
  steps:
  - task: Bash@3
    displayName: 'Clone projects with scripts'
    inputs:
      targetType: filePath
      filePath: ./build/gitClone.sh

  - task: NodeTool@0
    displayName: 'Install Node.js'
    inputs:
      versionSpec: '16.x'

  - ${{ if eq(parameters.cleanNpmCache, true) }}:
    - task: CmdLine@2
      displayName: 'BackEnd - npm clean cache'
      inputs:
        script: |
          npm cache clean --force
          npm cache verify
        workingDirectory: $(backend_app_dir)

  - template: templates/app-npm-build.yml
    parameters:
      appDir: $(backend_app_dir)
      appName: BackEnd App

  - task: Docker@1
    displayName: 'Build an image BackEnd'
    inputs:
      azureSubscriptionEndpoint: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureContainerRegistry: tuanphama3containerregistry.azurecr.io
      command: Build an image
      dockerFile: $(backend_app_dir)/Dockerfile
      buildContext: '**'
      imageName:  'acr-tuanphama3-devops-backend'

  - task: Docker@1
    displayName: 'Push an image BackEnd'
    inputs:
      azureSubscriptionEndpoint: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureContainerRegistry: tuanphama3containerregistry.azurecr.io
      command: Push an image
      buildContext: '**'
      imageName:  'acr-tuanphama3-devops-backend'

  - ${{ if eq(parameters.cleanNpmCache, true) }}:
    - task: CmdLine@2
      displayName: 'FrontEnd - npm clean cache'
      inputs:
        script: |
          npm cache clean --force
          npm cache verify
        workingDirectory: $(frontend_app_dir)

  - template: templates/app-npm-build.yml
    parameters:
      appDir: $(frontend_app_dir)
      appName: FrontEnd App

  - task: Docker@1
    displayName: 'Build an image FrontEnd'
    inputs:
      azureSubscriptionEndpoint: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureContainerRegistry: tuanphama3containerregistry.azurecr.io
      command: Build an image
      dockerFile: $(frontend_app_dir)/Dockerfile
      buildContext: '**'
      imageName:  'acr-tuanphama3-devops-frontend'

  - task: Docker@1
    displayName: 'Push an image FrontEnd'
    inputs:
      azureSubscriptionEndpoint: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureContainerRegistry: tuanphama3containerregistry.azurecr.io
      command: Push an image
      buildContext: '**'
      imageName:  'acr-tuanphama3-devops-frontend'

- job: DeployMongo
  dependsOn: Job_CI
  pool:
    name: 'Azure Pipelines'
  steps:
  - task: Bash@3
    displayName: 'Print WorkDir'
    inputs:
      script: |
        echo $(Build.SourcesDirectory)
        ls -la $(Build.SourcesDirectory)
        echo $(Build.SourcesDirectory)/app
        ls -la $(Build.SourcesDirectory)/app
        echo $(Build.SourcesDirectory)/app/sd4780_msa
        ls -la $(Build.SourcesDirectory)/app/sd4780_msa
        echo $(Build.SourcesDirectory)/app/sd4780_msa/k8s
        ls -la $(Build.SourcesDirectory)/app/sd4780_msa/k8s

  - task: KubernetesManifest@1
    inputs:
      action: 'deploy'
      connectionType: 'azureResourceManager'
      azureSubscriptionConnection: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureResourceGroup: 'tuanphama3ResourceGroup'
      kubernetesCluster: 'tuanphama3AKSCluster'
      useClusterAdmin: true
      namespace: 'aks-tuanphama3-ns'
      manifests: '$(k8s_mongo_path)'

  - task: Bash@3
    displayName: 'Verify secret'
    inputs:
      script: |
        kubectl get secret
        kubectl get secret mongo-secrets -o yaml

- job: DeployBackend
  dependsOn: DeployMongo
  pool:
    name: 'Azure Pipelines'
  steps:
  - task: KubernetesManifest@1
    inputs:
      action: 'deploy'
      connectionType: 'azureResourceManager'
      azureSubscriptionConnection: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureResourceGroup: 'tuanphama3ResourceGroup'
      kubernetesCluster: 'tuanphama3AKSCluster'
      useClusterAdmin: true
      namespace: 'aks-tuanphama3-ns'
      manifests: '$(k8s_backend_path)'

  - task: Bash@3
    displayName: 'Verify BackEnd'
    inputs:
      script: |
        kubectl get pod
        kubectl get service

- job: DeployFrontend
  dependsOn: DeployBackend
  pool:
    name: 'Azure Pipelines'
  steps:
  - task: KubernetesManifest@1
    inputs:
      action: 'deploy'
      connectionType: 'azureResourceManager'
      azureSubscriptionConnection: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureResourceGroup: 'tuanphama3ResourceGroup'
      kubernetesCluster: 'tuanphama3AKSCluster'
      useClusterAdmin: true
      namespace: 'aks-tuanphama3-ns'
      manifests: '$(k8s_frontend_path)'

  - task: Bash@3
    displayName: 'Verify FrontEnd'
    inputs:
      script: |
        kubectl get pod
        kubectl get service

- job: DeployIngress
  dependsOn: DeployBackend
  pool:
    name: 'Azure Pipelines'
  steps:
  - task: Bash@3
    displayName: 'Install NGINX ingress controller'
    inputs:
      script: |
        kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller- v1.7.1/deploy/static/provider/cloud/deploy.yaml
        kubectl get pods --namespace=ingress-nginx | grep nginx

  - task: KubernetesManifest@1
    inputs:
      action: 'deploy'
      connectionType: 'azureResourceManager'
      azureSubscriptionConnection: 'Azure ACR Subscription (015efe71-65eb-4453-a4b3-ba0b62119434)'
      azureResourceGroup: 'tuanphama3ResourceGroup'
      kubernetesCluster: 'tuanphama3AKSCluster'
      useClusterAdmin: true
      namespace: 'aks-tuanphama3-ns'
      manifests: '$(k8s_ingress_path)'

  - task: Bash@3
    displayName: 'Verify application ingress'
    inputs:
      script: |
        kubectl get ingress -o wide
